import json
import mysql.connector

class CricketIplDB:
    def __init__(self, host, user, password, port):
        self.host = host
        self.user = user
        self.password = password
        self.port = port
        self.database = "Cricket_Ipl"
        self.conn = None
        self.cursor = None

    def create_database(self):
        init_conn = mysql.connector.connect(
            host=self.host,
            user=self.user,
            password=self.password,
            port=self.port
        )
        init_cursor = init_conn.cursor()
        init_cursor.execute(f"CREATE DATABASE IF NOT EXISTS {self.database}")
        init_cursor.close()
        init_conn.close()

    def connect_database(self):
        self.conn = mysql.connector.connect(
            host=self.host,
            user=self.user,
            password=self.password,
            port=self.port,
            database=self.database
        )
        self.cursor = self.conn.cursor()

    def create_tables(self):
        create_tables_sql = """
        CREATE TABLE IF NOT EXISTS match_info (
            match_id INT PRIMARY KEY AUTO_INCREMENT,
            city VARCHAR(100),
            venue VARCHAR(100),
            date DATE,
            gender VARCHAR(10),
            match_type VARCHAR(10),
            season INT,
            team_type VARCHAR(20),
            toss_winner VARCHAR(100),
            toss_decision VARCHAR(10),
            winner VARCHAR(100),
            win_by_runs INT,
            player_of_match VARCHAR(100)
        );

        CREATE TABLE IF NOT EXISTS teams (
            match_id INT,
            team_name VARCHAR(100),
            FOREIGN KEY (match_id) REFERENCES match_info(match_id)
        );

        CREATE TABLE IF NOT EXISTS players (
            match_id INT,
            team_name VARCHAR(100),
            player_name VARCHAR(100),
            FOREIGN KEY (match_id) REFERENCES match_info(match_id)
        );

        CREATE TABLE IF NOT EXISTS officials (
            match_id INT,
            referee VARCHAR(100),
            reserve_umpire VARCHAR(100),
            tv_umpire VARCHAR(100),
            umpire1 VARCHAR(100),
            umpire2 VARCHAR(100),
            FOREIGN KEY (match_id) REFERENCES match_info(match_id)
        );

        CREATE TABLE IF NOT EXISTS innings (
            inning_id INT PRIMARY KEY AUTO_INCREMENT,
            match_id INT,
            inning_number INT,
            batting_team VARCHAR(100),
            FOREIGN KEY (match_id) REFERENCES match_info(match_id)
        );

        CREATE TABLE IF NOT EXISTS overs (
            over_id INT PRIMARY KEY AUTO_INCREMENT,
            inning_id INT,
            over_number INT,
            FOREIGN KEY (inning_id) REFERENCES innings(inning_id)
        );

        CREATE TABLE IF NOT EXISTS deliveries (
            delivery_id INT PRIMARY KEY AUTO_INCREMENT,
            over_id INT,
            ball_number INT,
            batter VARCHAR(100),
            bowler VARCHAR(100),
            non_striker VARCHAR(100),
            runs_batter INT,
            runs_extras INT,
            runs_total INT,
            extras_type VARCHAR(50),
            wicket_type VARCHAR(50),
            player_out VARCHAR(100),
            fielder VARCHAR(100),
            FOREIGN KEY (over_id) REFERENCES overs(over_id)
        );
        """

        for stmt in create_tables_sql.strip().split(';'):
            if stmt.strip():
                self.cursor.execute(stmt + ';')
        self.conn.commit()

    def close_connection(self):
        if self.cursor:
            self.cursor.close()
        if self.conn:
            self.conn.close()


class CricketIplDataInserter:
    def __init__(self, json_path, host, user, password, port, database):
        self.json_path = json_path
        self.conn = None
        self.cursor = None
        self.host = host
        self.user = user
        self.password = password
        self.port = port
        self.database = database

    def connect(self):
        self.conn = mysql.connector.connect(
            host=self.host,
            user=self.user,
            password=self.password,
            port=self.port,
            database=self.database
        )
        self.cursor = self.conn.cursor()

    def close(self):
        if self.cursor:
            self.cursor.close()
        if self.conn:
            self.conn.close()

    @staticmethod
    def get(data, *keys):
        for key in keys:
            if isinstance(data, dict) and key in data:
                data = data[key]
            elif isinstance(data, list) and isinstance(key, int) and key < len(data):
                data = data[key]
            else:
                return None
        return data

    def insert_data(self):
        with open(self.json_path, 'r', encoding='utf-8') as f:
            matches = json.load(f)

        match_id_counter = 1

        for data in matches:
            info = data.get("info", {})
            season = info.get("season")
            season = int(season) if season is not None and str(season).isdigit() else None

            try:
                # Insert match_info
                self.cursor.execute("""
                    INSERT INTO match_info (
                        match_id, city, venue, date, gender, match_type, season,
                        team_type, toss_winner, toss_decision, winner, win_by_runs, player_of_match
                    ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                """, (
                    match_id_counter,
                    info.get("city"),
                    info.get("venue"),
                    self.get(info, "dates", 0),
                    info.get("gender"),
                    info.get("match_type"),
                    season,
                    info.get("team_type"),
                    self.get(info, "toss", "winner"),
                    self.get(info, "toss", "decision"),
                    self.get(info, "outcome", "winner"),
                    self.get(info, "outcome", "by", "runs"),
                    self.get(info, "player_of_match", 0)
                ))

                # Insert teams
                for team in info.get("teams", []):
                    self.cursor.execute(
                        "INSERT INTO teams (match_id, team_name) VALUES (%s, %s)",
                        (match_id_counter, team)
                    )

                # Insert players
                for team, players in info.get("players", {}).items():
                    for player in players:
                        self.cursor.execute(
                            "INSERT INTO players (match_id, team_name, player_name) VALUES (%s, %s, %s)",
                            (match_id_counter, team, player)
                        )

                # Insert officials
                self.cursor.execute("""
                    INSERT INTO officials (match_id, referee, reserve_umpire, tv_umpire, umpire1, umpire2)
                    VALUES (%s, %s, %s, %s, %s, %s)
                """, (
                    match_id_counter,
                    self.get(info, "officials", "match_referees", 0),
                    self.get(info, "officials", "reserve_umpires", 0),
                    self.get(info, "officials", "tv_umpires", 0),
                    self.get(info, "officials", "umpires", 0),
                    self.get(info, "officials", "umpires", 1)
                ))

                # Insert innings, overs, deliveries
                for i, inning in enumerate(data.get("innings", []), 1):
                    if not isinstance(inning, dict):
                        print(f"⚠ Skipping malformed inning in match_id={match_id_counter}")
                        continue

                    team = inning.get("team")
                    self.cursor.execute(
                        "INSERT INTO innings (match_id, inning_number, batting_team) VALUES (%s, %s, %s)",
                        (match_id_counter, i, team)
                    )
                    inning_id = self.cursor.lastrowid

                    for over in inning.get("overs", []):
                        if not isinstance(over, dict):
                            print(f"⚠ Skipping malformed over in match_id={match_id_counter}")
                            continue

                        over_number = over.get("over")
                        self.cursor.execute(
                            "INSERT INTO overs (inning_id, over_number) VALUES (%s, %s)",
                            (inning_id, over_number)
                        )
                        over_id = self.cursor.lastrowid

                        for ball_number, delivery in enumerate(over.get("deliveries", [])):
                            if not isinstance(delivery, dict):
                                print(f"⚠ Skipping malformed delivery in match_id={match_id_counter}")
                                continue

                            runs = delivery.get("runs", {})
                            extras_type = None
                            if "extras" in delivery:
                                extras_type = list(delivery["extras"].keys())[0]

                            wicket_type = None
                            player_out = None
                            fielder = None
                            if "wickets" in delivery:
                                wicket = delivery["wickets"][0]
                                wicket_type = wicket.get("kind")
                                player_out = wicket.get("player_out")
                                if "fielders" in wicket and wicket["fielders"]:
                                    fielder = wicket["fielders"][0].get("name")

                            self.cursor.execute("""
                                INSERT INTO deliveries (
                                    over_id, ball_number, batter, bowler, non_striker,
                                    runs_batter, runs_extras, runs_total,
                                    extras_type, wicket_type, player_out, fielder
                                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                            """, (
                                over_id,
                                ball_number,
                                delivery.get("batter"),
                                delivery.get("bowler"),
                                delivery.get("non_striker"),
                                runs.get("batter", 0),
                                runs.get("extras", 0),
                                runs.get("total", 0),
                                extras_type,
                                wicket_type,
                                player_out,
                                fielder
                            ))

                self.conn.commit()
                print(f"✅ Inserted data for match_id={match_id_counter}")
                match_id_counter += 1

            except Exception as e:
                self.conn.rollback()
                print(f"❌ Error in match_id={match_id_counter}: {e}")


if __name__ == "__main__":
    HOST = "gateway01.ap-southeast-1.prod.aws.tidbcloud.com"
    USER = "3T8D8cjPqdd2sCi.root"
    PASSWORD = "kreDkHwCv0qYVB6G"
    PORT = 4000
    DATABASE = "Cricket_Ipl"
    JSON_PATH = r"C:\Users\ANTON\Documents\VS Code\Project-02\merged_ipl.json"

    # Step 1: Create DB and tables
    db = CricketIplDB(HOST, USER, PASSWORD, PORT)
    db.create_database()
    db.connect_database()
    db.create_tables()
    db.close_connection()

    # Step 2: Insert data from JSON
    inserter = CricketIplDataInserter(JSON_PATH, HOST, USER, PASSWORD, PORT, DATABASE)
    inserter.connect()
    inserter.insert_data()
    inserter.close()

    print("🎯 All tables created and data inserted successfully!")
   
